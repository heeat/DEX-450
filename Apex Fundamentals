Database.com is where data is stored
Force.com will contain metadata --- Package.xml
Salesforce itself is an ORM - Objects Relational Mapping (Framework)
Develop in Force.com.


Max log files per user - 20
log file size - 2MB(if more then new log file will get created)
Max debug memory per org is 50MB

wrapper - embed primitive types (Integer class instead of int,char) -heap not stack

primitive - Integer
referenced - memory allocated through constructer (Account acc = new Account())

Anon Window - As a transaction to Application server and returns a log file

3 types -

Singleton - Only 1 reference - no new keyword - constructor is a Private (String abc = new String() -- > not possible) 
"final" -- > no inheritance

1.primitive - objects - storing primitive value as wrapper - Auto boxing
2.referenced
3.collections -- list, set, map - (index is primary key). 90% transaction uses List -- nested max 5 levels 


Super class - SObject - all standard and custom objects are child to SObject.
Process of moving the data from child to parent is UPCASTING - Implicit (no need to convert since sobject is super class) SObject = object.
Process of moving the data from parent to child is DOWNCASTING - Explict (need to convert ) SObject memory ---- account = (Account)SObject.

Example:
/*
Account acc = new Account(name='TESLA');
SObject obj1 = acc; //upcasting
Account acc1 = (Account) obj1; //downcasting
System.debug('Data Captured : ' + acc1.name); // TESLA
System.debug('Data Captured : ' + acc1); // Account:{Name=TESLA}
*/

Transactions in cloud run as Batches

Example:
```
List<String> emplist = new List<String>();
emplist.add('glucose');
emplist.add('vitamins');
emplist.add('jam');
emplist.add('butter');
emplist.add('jam');
System.debug('list : ' + emplist);

for(Integer i = 0; i<emplist.size(); i++) //cyclomatic complexity more
{
    System.debug('Name is : ' + emplist.get(i)+' size is :'+ emplist.get(i).length());
}

for(String ename : emplist) //cyclomatic complexity less - forEach
{
    System.debug('Name is : ' + ename+' size is :'+ ename.length());
}
```

```
Contact c1 = new Contact(firstName='Chandra',lastName='Shekar');
Contact c2 = new Contact(firstName='David',lastName='Miller');
Contact c3 = new Contact(firstName='Pique',lastName='Shakira');

List<Contact> clist = new List<Contact>{c1,c2,c3};
//System.debug('clist info is ' + clist);

List<Contact> emplist = clist.deepclone(); //seperate memories  //just clone references same memory
System.debug('emplist info is ' + emplist);

//deepclone -- 12:47:34:003 USER_DEBUG [9]|DEBUG|emplist info is (Contact:{FirstName=Chandra, LastName=Shekar}, Contact:{FirstName=David, LastName=Miller}, Contact:{FirstName=Pique, LastName=Shakira})


//deepclone - creates a new reference in heap
//clone - Points to existing reference in heap

//clone -- 12:47:34:003 USER_DEBUG [9]|DEBUG|emplist info is (Contact:{FirstName=Chandra, LastName=Shekar}, Contact:{FirstName=David, LastName=Hudson}, Contact:{FirstName=Pique, LastName=Shakira})
```

/.
Set - unique values - no duplicates - if duplicate overrides existing.
No Indexing.
4 functions in set :
1.addAll
2.containsAll
3.removeAll
4.retainAll

```
Set<String> eset = new Set<String>{'a','b','c','d'};
Set<String> dset = new Set<String>{'x','y','z'};

Set<String> zset = new Set<String>();
zset.addAll(eset);
zset.addAll(dset);

System.debug('Set value : '+ zset);

if(zset.containsAll(eset)) System.debug('available');

zset.removeAll(eset);
System.debug('Set value : '+ zset);

zset.retainAll(eset);
System.debug('Set value : '+ zset);
```

Map - Key Value pairs - Schema Object reference

```
Map<Integer,String> emap = new Map<Integer,String>();

emap.put(101,'Banglore');
emap.put(102,'Chennai');
emap.put(103,'Hyderabad');
emap.put(104,'Pune');
emap.put(105,'Chennai');


System.debug('city data for 104 is '+emap.get(104)); //city data for 104 is pune
System.debug('All key values '+emap.keySet()); //{101,102,103,104,105}
System.debug('All data '+emap.values()); //
```

Transaction - Request and Response. -- Objects are involved always

Governer Limits (GL) - 

1.transaction specific - reset GL at end - DML/Queries
2.Timebound - reset GL for every 24 hours - Webservices/Email Services

Transactional Statements are of 3 types :

API is a class which contains fields and fucntions of all objects in Salesforce ORG. (Save,Edit,Clone,Cancel Buttons are all methods)
For every Object there is an API created.

1.SOQL - only for fetching (select statements) SQL -- performs all unlike SOQL (DML,DDL,TCL)

.. [] notation
.. Database.Query('') - >parameter is a string so -- > Dynamic SOQL - > because we can alter dtring anytime.
.. If you want Group By we have to include aggregrate functions.

//List<AggregateResult> alist = [select BillingCity,count(Name) ccount from Account Group By billingCity];
    for(AggregateResult ar : alist){ System.debug('city :' + ar.get('BillingCity'))+ ' '+ar.get('ccount'))  }

2.SOSL
3.DML



